
// Pin definitions
#define TRIG_PIN 9         // Trig pin of ultrasonic sensor
#define ECHO_PIN 10        // Echo pin of ultrasonic sensor
#define LEFT_MOTOR_FORWARD 3   // Left motor forward
#define LEFT_MOTOR_BACKWARD 4  // Left motor backward
#define RIGHT_MOTOR_FORWARD 5  // Right motor forward
#define RIGHT_MOTOR_BACKWARD 6 // Right motor backward
#define LED_PIN 13          // LED pin for lighting effects

// Constants
const int DISTANCE_THRESHOLD = 10; // Distance in cm to detect obstacles
const int LED_BLINK_DELAY = 500;   // LED blink interval in ms

void setup() {
  // Motor pins as output
  pinMode(LEFT_MOTOR_FORWARD, OUTPUT);
  pinMode(LEFT_MOTOR_BACKWARD, OUTPUT);
  pinMode(RIGHT_MOTOR_FORWARD, OUTPUT);
  pinMode(RIGHT_MOTOR_BACKWARD, OUTPUT);

  // Ultrasonic sensor pins
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // LED pin as output
  pinMode(LED_PIN, OUTPUT);

  // Begin Serial communication
  Serial.begin(9600);
}

void loop() {
  int distance = getDistance();

  // Log distance to Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  if (distance < DISTANCE_THRESHOLD) {
    // Obstacle detected, stop and blink LED
    stopMotors();
    blinkLED();
    reverseMotors();
    delay(1000); // Reverse for 1 second
    turnMotors(); // Turn to avoid obstacle
  } else {
    // No obstacle, move forward and light up LED
    forwardMotors();
    digitalWrite(LED_PIN, HIGH);
  }
  delay(100); // Small delay for stability
}

// Function to measure distance using ultrasonic sensor
int getDistance() {
  // Send ultrasonic pulse
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  // Measure the echo time
  long duration = pulseIn(ECHO_PIN, HIGH);

  // Convert time to distance in cm
  int distance = duration * 0.034 / 2;
  return distance;
}

// Function to stop all motors
void stopMotors() {
  digitalWrite(LEFT_MOTOR_FORWARD, LOW);
  digitalWrite(LEFT_MOTOR_BACKWARD, LOW);
  digitalWrite(RIGHT_MOTOR_FORWARD, LOW);
  digitalWrite(RIGHT_MOTOR_BACKWARD, LOW);
}

// Function to move forward
void forwardMotors() {
  digitalWrite(LEFT_MOTOR_FORWARD, HIGH);
  digitalWrite(LEFT_MOTOR_BACKWARD, LOW);
  digitalWrite(RIGHT_MOTOR_FORWARD, HIGH);
  digitalWrite(RIGHT_MOTOR_BACKWARD, LOW);
}

// Function to reverse
void reverseMotors() {
  digitalWrite(LEFT_MOTOR_FORWARD, LOW);
  digitalWrite(LEFT_MOTOR_BACKWARD, HIGH);
  digitalWrite(RIGHT_MOTOR_FORWARD, LOW);
  digitalWrite(RIGHT_MOTOR_BACKWARD, HIGH);
}

// Function to turn motors (simple right turn)
void turnMotors() {
  digitalWrite(LEFT_MOTOR_FORWARD, HIGH);
  digitalWrite(LEFT_MOTOR_BACKWARD, LOW);
  digitalWrite(RIGHT_MOTOR_FORWARD, LOW);
  digitalWrite(RIGHT_MOTOR_BACKWARD, HIGH);
  delay(500); // Turn for 500ms
}

// Function to blink LED
void blinkLED() {
  digitalWrite(LED_PIN, HIGH);
  delay(LED_BLINK_DELAY);
  digitalWrite(LED_PIN, LOW);
  delay(LED_BLINK_DELAY);
}
